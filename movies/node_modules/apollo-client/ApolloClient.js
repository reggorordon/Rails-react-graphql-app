<<<<<<< HEAD
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var apollo_link_1 = require("apollo-link");
var apollo_utilities_1 = require("apollo-utilities");
var ts_invariant_1 = require("ts-invariant");
var QueryManager_1 = require("./core/QueryManager");
var LocalState_1 = require("./core/LocalState");
var store_1 = require("./data/store");
var version_1 = require("./version");
=======
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { ApolloLink, execute, } from 'apollo-link';
import { isProduction, removeConnectionDirectiveFromDocument, } from 'apollo-utilities';
import { QueryManager } from './core/QueryManager';
import { DataStore } from './data/store';
import { version } from './version';
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
var hasSuggestedDevtools = false;
var ApolloClient = (function () {
    function ApolloClient(options) {
        var _this = this;
        this.defaultOptions = {};
        this.resetStoreCallbacks = [];
<<<<<<< HEAD
        this.clearStoreCallbacks = [];
        this.clientAwareness = {};
        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
        var link = options.link;
        if (!link && resolvers) {
            link = apollo_link_1.ApolloLink.empty();
        }
        if (!link || !cache) {
            throw new ts_invariant_1.InvariantError("\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\n        For more information, please visit:\n          https://www.apollographql.com/docs/react/basics/setup.html\n        to help you get started.\n      ");
        }
        var supportedCache = new Map();
        var supportedDirectives = new apollo_link_1.ApolloLink(function (operation, forward) {
            var result = supportedCache.get(operation.query);
            if (!result) {
                result = apollo_utilities_1.removeConnectionDirectiveFromDocument(operation.query);
=======
        var link = options.link, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions;
        if (!link || !cache) {
            throw new Error("\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\n        For more information, please visit:\n          https://www.apollographql.com/docs/react/basics/setup.html\n        to help you get started.\n      ");
        }
        var supportedCache = new Map();
        var supportedDirectives = new ApolloLink(function (operation, forward) {
            var result = supportedCache.get(operation.query);
            if (!result) {
                result = removeConnectionDirectiveFromDocument(operation.query);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
                supportedCache.set(operation.query, result);
                supportedCache.set(result, result);
            }
            operation.query = result;
            return forward(operation);
        });
        this.link = supportedDirectives.concat(link);
        this.cache = cache;
<<<<<<< HEAD
        this.store = new store_1.DataStore(cache);
=======
        this.store = new DataStore(cache);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.ssrMode = ssrMode;
        this.defaultOptions = defaultOptions || {};
<<<<<<< HEAD
        this.typeDefs = typeDefs;
=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        if (ssrForceFetchDelay) {
            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);
        }
        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
<<<<<<< HEAD
        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&
=======
        var defaultConnectToDevTools = !isProduction() &&
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
            typeof window !== 'undefined' &&
            !window.__APOLLO_CLIENT__;
        if (typeof connectToDevTools === 'undefined'
            ? defaultConnectToDevTools
            : connectToDevTools && typeof window !== 'undefined') {
            window.__APOLLO_CLIENT__ = this;
        }
<<<<<<< HEAD
        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {
=======
        if (!hasSuggestedDevtools && !isProduction()) {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
            hasSuggestedDevtools = true;
            if (typeof window !== 'undefined' &&
                window.document &&
                window.top === window.self) {
                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                    if (window.navigator &&
                        window.navigator.userAgent &&
                        window.navigator.userAgent.indexOf('Chrome') > -1) {
                        console.debug('Download the Apollo DevTools ' +
                            'for a better development experience: ' +
                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');
                    }
                }
            }
        }
<<<<<<< HEAD
        this.version = version_1.version;
        if (clientAwarenessName) {
            this.clientAwareness.name = clientAwarenessName;
        }
        if (clientAwarenessVersion) {
            this.clientAwareness.version = clientAwarenessVersion;
        }
        this.localState = new LocalState_1.LocalState({
            cache: cache,
            client: this,
            resolvers: resolvers,
            fragmentMatcher: fragmentMatcher,
        });
    }
    ApolloClient.prototype.stop = function () {
        if (this.queryManager) {
            this.queryManager.stop();
        }
    };
    ApolloClient.prototype.watchQuery = function (options) {
        if (this.defaultOptions.watchQuery) {
            options = tslib_1.__assign({}, this.defaultOptions.watchQuery, options);
=======
        this.version = version;
    }
    ApolloClient.prototype.watchQuery = function (options) {
        if (this.defaultOptions.watchQuery) {
            options = __assign({}, this.defaultOptions.watchQuery, options);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        if (this.disableNetworkFetches &&
            (options.fetchPolicy === 'network-only' ||
                options.fetchPolicy === 'cache-and-network')) {
<<<<<<< HEAD
            options = tslib_1.__assign({}, options, { fetchPolicy: 'cache-first' });
=======
            options = __assign({}, options, { fetchPolicy: 'cache-first' });
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        return this.initQueryManager().watchQuery(options);
    };
    ApolloClient.prototype.query = function (options) {
        if (this.defaultOptions.query) {
<<<<<<< HEAD
            options = tslib_1.__assign({}, this.defaultOptions.query, options);
        }
        ts_invariant_1.invariant(options.fetchPolicy !== 'cache-and-network', 'cache-and-network fetchPolicy can only be used with watchQuery');
        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
            options = tslib_1.__assign({}, options, { fetchPolicy: 'cache-first' });
=======
            options = __assign({}, this.defaultOptions.query, options);
        }
        if (options.fetchPolicy === 'cache-and-network') {
            throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');
        }
        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
            options = __assign({}, options, { fetchPolicy: 'cache-first' });
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        return this.initQueryManager().query(options);
    };
    ApolloClient.prototype.mutate = function (options) {
        if (this.defaultOptions.mutate) {
<<<<<<< HEAD
            options = tslib_1.__assign({}, this.defaultOptions.mutate, options);
=======
            options = __assign({}, this.defaultOptions.mutate, options);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        return this.initQueryManager().mutate(options);
    };
    ApolloClient.prototype.subscribe = function (options) {
        return this.initQueryManager().startGraphQLSubscription(options);
    };
    ApolloClient.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.initProxy().readQuery(options, optimistic);
    };
    ApolloClient.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.initProxy().readFragment(options, optimistic);
    };
    ApolloClient.prototype.writeQuery = function (options) {
        var result = this.initProxy().writeQuery(options);
        this.initQueryManager().broadcastQueries();
        return result;
    };
    ApolloClient.prototype.writeFragment = function (options) {
        var result = this.initProxy().writeFragment(options);
        this.initQueryManager().broadcastQueries();
        return result;
    };
    ApolloClient.prototype.writeData = function (options) {
        var result = this.initProxy().writeData(options);
        this.initQueryManager().broadcastQueries();
        return result;
    };
    ApolloClient.prototype.__actionHookForDevTools = function (cb) {
        this.devToolsHookCb = cb;
    };
    ApolloClient.prototype.__requestRaw = function (payload) {
<<<<<<< HEAD
        return apollo_link_1.execute(this.link, payload);
=======
        return execute(this.link, payload);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    };
    ApolloClient.prototype.initQueryManager = function () {
        var _this = this;
        if (!this.queryManager) {
<<<<<<< HEAD
            this.queryManager = new QueryManager_1.QueryManager({
=======
            this.queryManager = new QueryManager({
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
                link: this.link,
                store: this.store,
                queryDeduplication: this.queryDeduplication,
                ssrMode: this.ssrMode,
<<<<<<< HEAD
                clientAwareness: this.clientAwareness,
                localState: this.localState,
=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
                onBroadcast: function () {
                    if (_this.devToolsHookCb) {
                        _this.devToolsHookCb({
                            action: {},
                            state: {
                                queries: _this.queryManager
                                    ? _this.queryManager.queryStore.getStore()
                                    : {},
                                mutations: _this.queryManager
                                    ? _this.queryManager.mutationStore.getStore()
                                    : {},
                            },
                            dataWithOptimisticResults: _this.cache.extract(true),
                        });
                    }
                },
            });
        }
        return this.queryManager;
    };
    ApolloClient.prototype.resetStore = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            return _this.queryManager
                ? _this.queryManager.clearStore()
                : Promise.resolve(null);
        })
            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })
            .then(function () {
            return _this.queryManager && _this.queryManager.reFetchObservableQueries
                ? _this.queryManager.reFetchObservableQueries()
                : Promise.resolve(null);
        });
    };
    ApolloClient.prototype.clearStore = function () {
<<<<<<< HEAD
        var _this = this;
        var queryManager = this.queryManager;
        return Promise.resolve()
            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); })
            .then(function () {
            return queryManager ? queryManager.clearStore() : Promise.resolve(null);
        });
=======
        var queryManager = this.queryManager;
        return Promise.resolve().then(function () { return (queryManager ? queryManager.clearStore() : Promise.resolve(null)); });
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    };
    ApolloClient.prototype.onResetStore = function (cb) {
        var _this = this;
        this.resetStoreCallbacks.push(cb);
        return function () {
            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
<<<<<<< HEAD
    ApolloClient.prototype.onClearStore = function (cb) {
        var _this = this;
        this.clearStoreCallbacks.push(cb);
        return function () {
            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
        return this.queryManager
            ? this.queryManager.reFetchObservableQueries(includeStandby)
            : Promise.resolve(null);
    };
    ApolloClient.prototype.extract = function (optimistic) {
        return this.initProxy().extract(optimistic);
    };
    ApolloClient.prototype.restore = function (serializedState) {
        return this.initProxy().restore(serializedState);
    };
<<<<<<< HEAD
    ApolloClient.prototype.addResolvers = function (resolvers) {
        this.localState.addResolvers(resolvers);
    };
    ApolloClient.prototype.setResolvers = function (resolvers) {
        this.localState.setResolvers(resolvers);
    };
    ApolloClient.prototype.getResolvers = function () {
        return this.localState.getResolvers();
    };
    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
    };
=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    ApolloClient.prototype.initProxy = function () {
        if (!this.proxy) {
            this.initQueryManager();
            this.proxy = this.cache;
        }
        return this.proxy;
    };
    return ApolloClient;
}());
<<<<<<< HEAD
exports.default = ApolloClient;
=======
export default ApolloClient;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
//# sourceMappingURL=ApolloClient.js.map