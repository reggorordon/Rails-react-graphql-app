<<<<<<< HEAD
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var apollo_utilities_1 = require("apollo-utilities");
var ts_invariant_1 = require("ts-invariant");
var networkStatus_1 = require("../core/networkStatus");
=======
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { print } from 'graphql/language/printer';
import { isEqual } from 'apollo-utilities';
import { NetworkStatus } from '../core/networkStatus';
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
var QueryStore = (function () {
    function QueryStore() {
        this.store = {};
    }
    QueryStore.prototype.getStore = function () {
        return this.store;
    };
    QueryStore.prototype.get = function (queryId) {
        return this.store[queryId];
    };
    QueryStore.prototype.initQuery = function (query) {
        var previousQuery = this.store[query.queryId];
        if (previousQuery &&
            previousQuery.document !== query.document &&
<<<<<<< HEAD
            !apollo_utilities_1.isEqual(previousQuery.document, query.document)) {
            throw new ts_invariant_1.InvariantError('Internal Error: may not update existing query string in store');
=======
            print(previousQuery.document) !== print(query.document)) {
            throw new Error('Internal Error: may not update existing query string in store');
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        var isSetVariables = false;
        var previousVariables = null;
        if (query.storePreviousVariables &&
            previousQuery &&
<<<<<<< HEAD
            previousQuery.networkStatus !== networkStatus_1.NetworkStatus.loading) {
            if (!apollo_utilities_1.isEqual(previousQuery.variables, query.variables)) {
=======
            previousQuery.networkStatus !== NetworkStatus.loading) {
            if (!isEqual(previousQuery.variables, query.variables)) {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
                isSetVariables = true;
                previousVariables = previousQuery.variables;
            }
        }
        var networkStatus;
        if (isSetVariables) {
<<<<<<< HEAD
            networkStatus = networkStatus_1.NetworkStatus.setVariables;
        }
        else if (query.isPoll) {
            networkStatus = networkStatus_1.NetworkStatus.poll;
        }
        else if (query.isRefetch) {
            networkStatus = networkStatus_1.NetworkStatus.refetch;
        }
        else {
            networkStatus = networkStatus_1.NetworkStatus.loading;
=======
            networkStatus = NetworkStatus.setVariables;
        }
        else if (query.isPoll) {
            networkStatus = NetworkStatus.poll;
        }
        else if (query.isRefetch) {
            networkStatus = NetworkStatus.refetch;
        }
        else {
            networkStatus = NetworkStatus.loading;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
        var graphQLErrors = [];
        if (previousQuery && previousQuery.graphQLErrors) {
            graphQLErrors = previousQuery.graphQLErrors;
        }
        this.store[query.queryId] = {
            document: query.document,
            variables: query.variables,
            previousVariables: previousVariables,
            networkError: null,
            graphQLErrors: graphQLErrors,
            networkStatus: networkStatus,
            metadata: query.metadata,
        };
        if (typeof query.fetchMoreForQueryId === 'string' &&
            this.store[query.fetchMoreForQueryId]) {
            this.store[query.fetchMoreForQueryId].networkStatus =
<<<<<<< HEAD
                networkStatus_1.NetworkStatus.fetchMore;
=======
                NetworkStatus.fetchMore;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
    };
    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {
        if (!this.store || !this.store[queryId])
            return;
        this.store[queryId].networkError = null;
        this.store[queryId].graphQLErrors =
            result.errors && result.errors.length ? result.errors : [];
        this.store[queryId].previousVariables = null;
<<<<<<< HEAD
        this.store[queryId].networkStatus = networkStatus_1.NetworkStatus.ready;
        if (typeof fetchMoreForQueryId === 'string' &&
            this.store[fetchMoreForQueryId]) {
            this.store[fetchMoreForQueryId].networkStatus = networkStatus_1.NetworkStatus.ready;
=======
        this.store[queryId].networkStatus = NetworkStatus.ready;
        if (typeof fetchMoreForQueryId === 'string' &&
            this.store[fetchMoreForQueryId]) {
            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }
    };
    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {
        if (!this.store || !this.store[queryId])
            return;
        this.store[queryId].networkError = error;
<<<<<<< HEAD
        this.store[queryId].networkStatus = networkStatus_1.NetworkStatus.error;
=======
        this.store[queryId].networkStatus = NetworkStatus.error;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        if (typeof fetchMoreForQueryId === 'string') {
            this.markQueryResultClient(fetchMoreForQueryId, true);
        }
    };
    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {
        if (!this.store || !this.store[queryId])
            return;
        this.store[queryId].networkError = null;
        this.store[queryId].previousVariables = null;
        this.store[queryId].networkStatus = complete
<<<<<<< HEAD
            ? networkStatus_1.NetworkStatus.ready
            : networkStatus_1.NetworkStatus.loading;
=======
            ? NetworkStatus.ready
            : NetworkStatus.loading;
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    };
    QueryStore.prototype.stopQuery = function (queryId) {
        delete this.store[queryId];
    };
    QueryStore.prototype.reset = function (observableQueryIds) {
        var _this = this;
        this.store = Object.keys(this.store)
            .filter(function (queryId) {
            return observableQueryIds.indexOf(queryId) > -1;
        })
            .reduce(function (res, key) {
<<<<<<< HEAD
            res[key] = tslib_1.__assign({}, _this.store[key], { networkStatus: networkStatus_1.NetworkStatus.loading });
=======
            res[key] = __assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
            return res;
        }, {});
    };
    return QueryStore;
}());
<<<<<<< HEAD
exports.QueryStore = QueryStore;
=======
export { QueryStore };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
//# sourceMappingURL=queries.js.map