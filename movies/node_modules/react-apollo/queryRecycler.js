<<<<<<< HEAD
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shallowEqual_1 = tslib_1.__importDefault(require("./utils/shallowEqual"));
=======
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var shallowEqual = require('fbjs/lib/shallowEqual');
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
var ObservableQueryRecycler = (function () {
    function ObservableQueryRecycler() {
        this.observableQueries = [];
    }
    ObservableQueryRecycler.prototype.recycle = function (observableQuery) {
        observableQuery.setOptions({
            fetchPolicy: 'standby',
            pollInterval: 0,
            fetchResults: false,
        });
        this.observableQueries.push({
            observableQuery: observableQuery,
            subscription: observableQuery.subscribe({}),
        });
    };
    ObservableQueryRecycler.prototype.reuse = function (options) {
        if (this.observableQueries.length <= 0) {
            return null;
        }
        var item = this.observableQueries.pop();
        if (!item) {
            return null;
        }
        var observableQuery = item.observableQuery, subscription = item.subscription;
        subscription.unsubscribe();
<<<<<<< HEAD
        var ssr = options.ssr, client = options.client, modifiableOpts = tslib_1.__rest(options, ["ssr", "client"]);
        if (!shallowEqual_1.default(modifiableOpts.variables || {}, observableQuery.variables))
            return null;
        observableQuery.setOptions(tslib_1.__assign({}, modifiableOpts, { pollInterval: options.pollInterval, fetchPolicy: options.fetchPolicy }));
=======
        var ssr = options.ssr, client = options.client, modifiableOpts = __rest(options, ["ssr", "client"]);
        if (!shallowEqual(modifiableOpts.variables || {}, observableQuery.variables))
            return null;
        observableQuery.setOptions(__assign({}, modifiableOpts, { pollInterval: options.pollInterval, fetchPolicy: options.fetchPolicy }));
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        return observableQuery;
    };
    return ObservableQueryRecycler;
}());
<<<<<<< HEAD
exports.ObservableQueryRecycler = ObservableQueryRecycler;
=======
export { ObservableQueryRecycler };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
//# sourceMappingURL=queryRecycler.js.map