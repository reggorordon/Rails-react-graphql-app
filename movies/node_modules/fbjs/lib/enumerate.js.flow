/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @providesModule enumerate
 *
 */
<<<<<<< HEAD

const KIND_KEYS = 'keys';
const KIND_VALUES = 'values';
const KIND_ENTRIES = 'entries';

/**
 * Specific Array iterators.
 */
const ArrayIterators = function () {

=======
const KIND_KEYS = 'keys';
const KIND_VALUES = 'values';
const KIND_ENTRIES = 'entries';
/**
 * Specific Array iterators.
 */

const ArrayIterators = function () {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  let hasNative = hasNativeIterator(Array);
  let ArrayIterator;

  if (!hasNative) {
    ArrayIterator = class ArrayIterator {
      // 22.1.5.1 CreateArrayIterator Abstract Operation
      constructor(array, kind) {
        this._iteratedObject = array;
        this._kind = kind;
        this._nextIndex = 0;
<<<<<<< HEAD
      }

      // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      next() {
        if (this._iteratedObject == null) {
          return { value: undefined, done: true };
=======
      } // 22.1.5.2.1 %ArrayIteratorPrototype%.next()


      next() {
        if (this._iteratedObject == null) {
          return {
            value: undefined,
            done: true
          };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }

        let array = this._iteratedObject;
        let len = this._iteratedObject.length;
        let index = this._nextIndex;
        let kind = this._kind;

        if (index >= len) {
          this._iteratedObject = undefined;
<<<<<<< HEAD
          return { value: undefined, done: true };
=======
          return {
            value: undefined,
            done: true
          };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }

        this._nextIndex = index + 1;

        if (kind === KIND_KEYS) {
<<<<<<< HEAD
          return { value: index, done: false };
        } else if (kind === KIND_VALUES) {
          return { value: array[index], done: false };
        } else if (kind === KIND_ENTRIES) {
          return { value: [index, array[index]], done: false };
        }
      }

      // 22.1.5.2.2 %ArrayIteratorPrototype%[@@iterator]()
      [Symbol.iterator]() {
        return this;
      }
=======
          return {
            value: index,
            done: false
          };
        } else if (kind === KIND_VALUES) {
          return {
            value: array[index],
            done: false
          };
        } else if (kind === KIND_ENTRIES) {
          return {
            value: [index, array[index]],
            done: false
          };
        }
      } // 22.1.5.2.2 %ArrayIteratorPrototype%[@@iterator]()


      [Symbol.iterator]() {
        return this;
      }

>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    };
  }

  return {
    keys: hasNative ? array => array.keys() : array => new ArrayIterator(array, KIND_KEYS),
<<<<<<< HEAD

    values: hasNative ? array => array.values() : array => new ArrayIterator(array, KIND_VALUES),

    entries: hasNative ? array => array.entries() : array => new ArrayIterator(array, KIND_ENTRIES)
  };
}();

// -----------------------------------------------------------------
=======
    values: hasNative ? array => array.values() : array => new ArrayIterator(array, KIND_VALUES),
    entries: hasNative ? array => array.entries() : array => new ArrayIterator(array, KIND_ENTRIES)
  };
}(); // -----------------------------------------------------------------
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8

/**
 * Specific String iterators.
 */
<<<<<<< HEAD
const StringIterators = function () {

=======


const StringIterators = function () {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  let hasNative = hasNativeIterator(String);
  let StringIterator;

  if (!hasNative) {
    StringIterator = class StringIterator {
      // 21.1.5.1 CreateStringIterator Abstract Operation
      constructor(string) {
        this._iteratedString = string;
        this._nextIndex = 0;
<<<<<<< HEAD
      }

      // 21.1.5.2.1 %StringIteratorPrototype%.next()
      next() {
        if (this._iteratedString == null) {
          return { value: undefined, done: true };
=======
      } // 21.1.5.2.1 %StringIteratorPrototype%.next()


      next() {
        if (this._iteratedString == null) {
          return {
            value: undefined,
            done: true
          };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }

        let index = this._nextIndex;
        let s = this._iteratedString;
        let len = s.length;

        if (index >= len) {
          this._iteratedString = undefined;
<<<<<<< HEAD
          return { value: undefined, done: true };
=======
          return {
            value: undefined,
            done: true
          };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        }

        let ret;
        let first = s.charCodeAt(index);

        if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
          ret = s[index];
        } else {
          let second = s.charCodeAt(index + 1);
<<<<<<< HEAD
=======

>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
          if (second < 0xDC00 || second > 0xDFFF) {
            ret = s[index];
          } else {
            ret = s[index] + s[index + 1];
          }
        }

        this._nextIndex = index + ret.length;
<<<<<<< HEAD

        return { value: ret, done: false };
      }

      // 21.1.5.2.2 %StringIteratorPrototype%[@@iterator]()
      [Symbol.iterator]() {
        return this;
      }
=======
        return {
          value: ret,
          done: false
        };
      } // 21.1.5.2.2 %StringIteratorPrototype%[@@iterator]()


      [Symbol.iterator]() {
        return this;
      }

>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    };
  }

  return {
    keys() {
      throw TypeError(`Strings default iterator doesn't implement keys.`);
    },

    values: hasNative ? string => string[Symbol.iterator]() : string => new StringIterator(string),

    entries() {
      throw TypeError(`Strings default iterator doesn't implement entries.`);
    }
<<<<<<< HEAD
=======

>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  };
}();

function hasNativeIterator(classObject) {
  return typeof classObject.prototype[Symbol.iterator] === 'function' && typeof classObject.prototype.values === 'function' && typeof classObject.prototype.keys === 'function' && typeof classObject.prototype.entries === 'function';
<<<<<<< HEAD
}

// -----------------------------------------------------------------
=======
} // -----------------------------------------------------------------
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8

/**
 * Generic object iterator.
 */
<<<<<<< HEAD
=======


>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
class ObjectIterator {
  constructor(object, kind) {
    this._iteratedObject = object;
    this._kind = kind;
    this._keys = Object.keys(object);
    this._nextIndex = 0;
  }

  next() {
    let len = this._keys.length;
    let index = this._nextIndex;
    let kind = this._kind;
    let key = this._keys[index];

    if (index >= len) {
      this._iteratedObject = undefined;
<<<<<<< HEAD
      return { value: undefined, done: true };
=======
      return {
        value: undefined,
        done: true
      };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    }

    this._nextIndex = index + 1;

    if (kind === KIND_KEYS) {
<<<<<<< HEAD
      return { value: key, done: false };
    } else if (kind === KIND_VALUES) {
      return { value: this._iteratedObject[key], done: false };
    } else if (kind === KIND_ENTRIES) {
      return { value: [key, this._iteratedObject[key]], done: false };
=======
      return {
        value: key,
        done: false
      };
    } else if (kind === KIND_VALUES) {
      return {
        value: this._iteratedObject[key],
        done: false
      };
    } else if (kind === KIND_ENTRIES) {
      return {
        value: [key, this._iteratedObject[key]],
        done: false
      };
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
    }
  }

  [Symbol.iterator]() {
    return this;
  }
<<<<<<< HEAD
}

=======

}
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
/**
 * Generic object iterator, iterates over all own enumerable
 * properties. Used only if if no specific iterator is available,
 * and object don't implement iterator protocol.
 */
<<<<<<< HEAD
=======


>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
const GenericIterators = {
  keys(object) {
    return new ObjectIterator(object, KIND_KEYS);
  },

  values(object) {
    return new ObjectIterator(object, KIND_VALUES);
  },

  entries(object) {
    return new ObjectIterator(object, KIND_ENTRIES);
  }
<<<<<<< HEAD
};

// -----------------------------------------------------------------
=======

}; // -----------------------------------------------------------------
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8

/**
 * Main iterator function. Returns default iterator based
 * on the class of an instance.
 */
<<<<<<< HEAD
function enumerate(object, kind) {

=======

function enumerate(object, kind) {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  // First check specific iterators.
  if (typeof object === 'string') {
    return StringIterators[kind || KIND_VALUES](object);
  } else if (Array.isArray(object)) {
<<<<<<< HEAD
    return ArrayIterators[kind || KIND_VALUES](object);

    // Then see if an object implements own.
  } else if (object[Symbol.iterator]) {
    return object[Symbol.iterator]();

    // And fallback to generic with entries.
=======
    return ArrayIterators[kind || KIND_VALUES](object); // Then see if an object implements own.
  } else if (object[Symbol.iterator]) {
    return object[Symbol.iterator](); // And fallback to generic with entries.
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  } else {
    return GenericIterators[kind || KIND_ENTRIES](object);
  }
}

Object.assign(enumerate, {
  /**
   * Export constants
   */
<<<<<<< HEAD

=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  KIND_KEYS,
  KIND_VALUES,
  KIND_ENTRIES,

  /**
   * Convenient explicit iterators for special kinds.
   */
<<<<<<< HEAD

=======
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  keys(object) {
    return enumerate(object, KIND_KEYS);
  },

  values(object) {
    return enumerate(object, KIND_VALUES);
  },

  entries(object) {
    return enumerate(object, KIND_ENTRIES);
  },

  generic: GenericIterators.entries
<<<<<<< HEAD

});

=======
});
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
module.exports = enumerate;