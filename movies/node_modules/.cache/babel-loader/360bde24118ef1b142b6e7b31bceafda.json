{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar isFunction = require(\"lodash/isFunction\");\n\nvar Applicator_1 = require(\"./Applicator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar PartialValueApplicator = function (_super) {\n  tslib_1.__extends(PartialValueApplicator, _super);\n\n  function PartialValueApplicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PartialValueApplicator.prototype.apply = function (_a) {\n    var args = _a.args,\n        target = _a.target,\n        value = _a.value,\n        execute = _a.config.execute;\n    return function () {\n      var invokeArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        invokeArgs[_i] = arguments[_i];\n      }\n\n      var fn = value;\n      var argIndex = 0;\n\n      if (!isFunction(fn)) {\n        fn = utils_1.resolveFunction(args[0], this, target);\n        argIndex = 1;\n      }\n\n      return execute.apply(void 0, [fn].concat(args.slice(argIndex))).apply(this, invokeArgs);\n    };\n  };\n\n  return PartialValueApplicator;\n}(Applicator_1.Applicator);\n\nexports.PartialValueApplicator = PartialValueApplicator;","map":null,"metadata":{},"sourceType":"script"}