{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar attempt = require(\"lodash/attempt\");\n\nvar partial = require(\"lodash/partial\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar attemptFn = function attemptFn(fn) {\n  return partial(attempt, fn);\n};\n\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(attemptFn, new applicators_1.PreValueApplicator()));\n/**\n * Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked.\n * @param {...*} [args] The arguments to invoke func with.\n * @example\n *\n * class MyClass {\n *   @Attempt()\n *   fn(value) {\n *     if (typeof value === 'number') {\n *       return value\n *     }\n *\n *     throw new Error();\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn(10); // => 10;\n * myClass.fn(null); // => Error\n */\n\nfunction Attempt() {\n  var partials = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    partials[_i] = arguments[_i];\n  }\n\n  return decorator.apply(void 0, partials);\n}\n\nexports.Attempt = Attempt;\nexports.attempt = Attempt;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}