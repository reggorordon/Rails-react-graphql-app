{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar after = require(\"lodash/after\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(after, new applicators_1.PostValueApplicator(), {\n  setter: true\n}));\n/**\n * The opposite of Before. This method creates a function that invokes once it's called n or more times.\n * This spans across all instances of the class instead of the instance.\n * @param {number} n The number of calls before the function is invoked.\n * @example\n *\n * class MyClass {\n *   @AfterAll(2)\n *   fn() {\n *     return 10;\n *   }\n * }\n *\n * const myClass = new MyClass();\n * const myClass2 = new MyClass();\n *\n * myClass.fn(); // => undefined\n * myClass.fn(); // => 10\n *\n * myClass2.fn(); // => 10\n * myClass2.fn(); // => 10\n */\n\nfunction AfterAll(n) {\n  return decorator(n);\n}\n\nexports.AfterAll = AfterAll;\nexports.afterAll = AfterAll;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}