{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar defer = require(\"lodash/defer\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(defer, new applicators_1.InvokeApplicator(), {\n  setter: true\n}));\n/**\n * Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it's invoked.\n *\n * @param {...*} [args] Additional arguments to invoke the function with\n * @example\n *\n * class MyClass {\n *   value = 100;\n *\n *   @Defer()\n *   add(a) {\n *     this.value += a;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.add(10);\n *\n * myClass.value; // => 100;\n *\n * setTimeout(() => {\n *   myClass.value; // => 110;\n * }, 0);\n */\n\nfunction Defer() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return decorator.apply(void 0, args);\n}\n\nexports.Defer = Defer;\nexports.defer = Defer;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}