{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bind = require(\"lodash/bind\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createInstanceDecorator(new factory_1.DecoratorConfig(bind, new applicators_1.BindApplicator()));\n/**\n * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\n *\n * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\n *\n * Note: Unlike native Function#bind, this method doesn't set the \"length\" property of bound functions.\n * @param {...*} [partials] The argument to be partially applied.\n * @example\n *\n * class MyClass {\n *   @Bind()\n *   bound() {\n *     return this;\n *   }\n *\n *   unbound() {\n *     return this;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.bound.call(null); // => myClass {}\n * myClass.unbound.call(null); // => null\n */\n\nfunction Bind() {\n  var partials = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    partials[_i] = arguments[_i];\n  }\n\n  return decorator.apply(void 0, partials);\n}\n\nexports.Bind = Bind;\nexports.bind = Bind;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}