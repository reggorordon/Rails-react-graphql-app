{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isFunction = require(\"lodash/isFunction\");\n\nvar isString = require(\"lodash/isString\");\n\nvar log_1 = require(\"./log\");\n/**\n  * Resolves a function on the current target object. It first will\n  * try and resolve on the context object, then the target object,\n  * then an error will be thrown if the method can not be resolved.\n  * @private\n  * @param {Function|string} method The method or method name.\n  * @param {Object} [context] The context object to resolve from.\n  * @param {Object} [target] The target object to resolve from.\n  * @returns {Function} The resolved function.\n  */\n\n\nfunction resolveFunction(method, context, target, throwNotFound) {\n  if (throwNotFound === void 0) {\n    throwNotFound = true;\n  }\n\n  if (isFunction(method)) {\n    return method;\n  } else if (isString(method)) {\n    if (context && isFunction(context[method])) {\n      return context[method];\n    } else if (target && isFunction(target[method])) {\n      return target[method];\n    }\n  }\n\n  if (throwNotFound) {\n    throw new ReferenceError(log_1.log(\"Can not resolve method \" + method + \" on any target Objects\"));\n  }\n}\n\nexports.resolveFunction = resolveFunction;","map":null,"metadata":{},"sourceType":"script"}