{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/src/components/MovieList.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n          {\\n            movies {\\n              id\\n              title\\n              description\\n              reviews {\\n                edges {\\n                  node {\\n                    content\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nvar MovieList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MovieList, _Component);\n\n  function MovieList(props) {\n    var _this;\n\n    _classCallCheck(this, MovieList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MovieList).call(this, props));\n    _this.state = {\n      movies: {\n        id: '',\n        title: '',\n        description: ''\n      }\n    };\n    return _this;\n  }\n\n  _createClass(MovieList, [{\n    key: \"render\",\n    value: function render() {\n      var MOVIES_QUERY = gql(_templateObject());\n      return React.createElement(Query, {\n        query: MOVIES_QUERY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (loading) return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, \"Fetching\");\n        if (error) return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"Nope!\");\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, data.movies.map(function () {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, React.createElement(\"ul\", {\n            key: data.movies.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }), React.createElement(\"ul\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, data.movies.title), React.createElement(\"ul\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, data.movies.description)));\n        }));\n      });\n    }\n  }]);\n\n  return MovieList;\n}(Component);\n\nexport default MovieList;","map":{"version":3,"sources":["/Users/reggordon/src/github.com/Shopify/movies-graphql_with_frontend/movies/src/components/MovieList.js"],"names":["React","Component","Query","gql","MovieList","props","state","movies","id","title","description","MOVIES_QUERY","loading","error","data","map"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;IACMC,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AACJC,QAAAA,EAAE,EAAE,EADA;AAEJC,QAAAA,KAAK,EAAE,EAFH;AAGJC,QAAAA,WAAW,EAAC;AAHR;AADC,KAAb;AAFe;AASlB;;;;6BAEQ;AACL,UAAMC,YAAY,GAAGR,GAAH,mBAAlB;AAiBA,aACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEQ,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,gBAA8B;AAAA,YAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,YAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAC3B,YAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACb,YAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACX,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKC,IAAI,CAACP,MAAL,CAAYQ,GAAZ,CAAgB;AAAA,iBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAI,YAAA,GAAG,EAAED,IAAI,CAACP,MAAL,CAAYC,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKM,IAAI,CAACP,MAAL,CAAYE,KAAjB,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKK,IAAI,CAACP,MAAL,CAAYG,WAAjB,CAHJ,CADA,CADa;AAAA,SAAhB,CADL,CADJ;AAcH,OAlBL,CADJ;AAsBH;;;;EApDmBT,S;;AAsDxB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nclass MovieList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: {\n                id: '',\n                title: '',\n                description:''\n            }\n        }\n    }\n    \n    render() {\n        const MOVIES_QUERY = gql`\n          {\n            movies {\n              id\n              title\n              description\n              reviews {\n                edges {\n                  node {\n                    content\n                  }\n                }\n              }\n            }\n          }\n        `;\n\n        return (\n            <Query query={MOVIES_QUERY}>\n                {({ loading, error, data }) => {\n                    if (loading) return <div>Fetching</div>\n                    if (error) return <div>Nope!</div>\n                    return (\n                        <div>\n                            {data.movies.map(() => (\n                                <div>\n                                <li> \n                                    <ul key={data.movies.id}></ul>\n                                    <ul>{data.movies.title}</ul>\n                                    <ul>{data.movies.description}</ul>\n                                  </li>\n                                </div>\n                                \n                            ))}\n                        </div>\n                    )\n                }}\n            </Query>\n        )\n    }\n    }\nexport default MovieList"]},"metadata":{},"sourceType":"module"}