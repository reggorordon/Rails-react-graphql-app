{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar flow = require(\"lodash/flow\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createInstanceDecorator(new factory_1.DecoratorConfig(flow, new applicators_1.ComposeApplicator({\n  post: true\n}), {\n  property: true\n}));\n/**\n * Creates a function that returns the result of invoking the given functions with the this binding of the created function,\n * where each successive invocation is supplied the return value of the previous.\n *\n * @example\n *\n * class MyClass {\n *   name = 'Ted';\n *\n *   @Flow('getName', toUpperCase)\n *   getUpperCaseName: () => string;\n *\n *   getName() {\n *     return this.name;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.getUpperCaseName(); // => 'TED'\n */\n\nfunction Flow() {\n  var fns = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i] = arguments[_i];\n  }\n\n  return decorator.apply(void 0, fns);\n}\n\nexports.Flow = Flow;\nexports.flow = Flow;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}