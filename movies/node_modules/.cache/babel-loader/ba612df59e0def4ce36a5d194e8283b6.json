{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar isFunction = require(\"lodash/isFunction\");\n\nvar isObject = require(\"lodash/isObject\");\n\nvar Applicator_1 = require(\"./Applicator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar MemoizeApplicator = function (_super) {\n  tslib_1.__extends(MemoizeApplicator, _super);\n\n  function MemoizeApplicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MemoizeApplicator.prototype.apply = function (_a) {\n    var value = _a.value,\n        instance = _a.instance,\n        execute = _a.config.execute,\n        args = _a.args,\n        target = _a.target;\n    var resolver = utils_1.resolveFunction(isFunction(args[0]) ? args[0] : isObject(args[0]) ? args[0].resolver : args[0], instance, target, false);\n\n    if (resolver && instance) {\n      resolver = resolver.bind(instance);\n    }\n\n    var memoized = resolver ? execute(value, resolver) : execute(value);\n\n    if (isObject(args[0])) {\n      var _b = args[0],\n          cache = _b.cache,\n          type = _b.type;\n\n      if (cache) {\n        memoized.cache = cache;\n      } else if (isFunction(type)) {\n        memoized.cache = new type();\n      }\n    }\n\n    return memoized;\n  };\n\n  return MemoizeApplicator;\n}(Applicator_1.Applicator);\n\nexports.MemoizeApplicator = MemoizeApplicator;","map":null,"metadata":{},"sourceType":"script"}