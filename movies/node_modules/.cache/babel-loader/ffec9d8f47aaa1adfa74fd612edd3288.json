{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar flip = require(\"lodash/flip\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createInstanceDecorator(new factory_1.DecoratorConfig(flip, new applicators_1.PartialValueApplicator(), {\n  property: true\n}));\n/**\n * Creates a function that invokes func with arguments reversed. Honestly, there is probably not much\n * use for this decorator but maybe you will find one?\n *\n * @example\n *\n * class MyClass {\n *   value = 100;\n *\n *   @Flip('fn')\n *   fn2: (b: number, a: string) => [ number, string ];\n *\n *   fn(a: string, b: number): [ string, number ] {\n *     return [ a, b ];\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn2(10, '20'); // => [ '20', 10 ]\n */\n\nfunction Flip(fn) {\n  return decorator(fn);\n}\n\nexports.Flip = Flip;\nexports.flip = Flip;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}