{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isFunction = require(\"lodash/isFunction\");\n\nvar common_1 = require(\"./common\");\n\nvar utils_1 = require(\"../utils\");\n\nvar InternalDecoratorFactory = function () {\n  function InternalDecoratorFactory() {}\n\n  InternalDecoratorFactory.prototype.createDecorator = function (config) {\n    var _this = this;\n\n    var applicator = config.applicator;\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return function (target, name, _descriptor) {\n        var descriptor = _this._resolveDescriptor(target, name, _descriptor);\n\n        var value = descriptor.value,\n            get = descriptor.get,\n            set = descriptor.set; // If this decorator is being applied after an instance decorator we simply ignore it\n        // as we can't apply it correctly.\n\n        if (!common_1.InstanceChainMap.has([target, name])) {\n          if (isFunction(value)) {\n            descriptor.value = utils_1.copyMetadata(applicator.apply({\n              config: config,\n              target: target,\n              value: value,\n              args: args\n            }), value);\n          } else if (isFunction(get) && config.getter) {\n            descriptor.get = utils_1.copyMetadata(applicator.apply({\n              config: config,\n              target: target,\n              value: get,\n              args: args\n            }), get);\n          } else if (isFunction(set) && config.setter) {\n            descriptor.set = utils_1.copyMetadata(applicator.apply({\n              config: config,\n              target: target,\n              value: set,\n              args: args\n            }), get);\n          }\n        }\n\n        return descriptor;\n      };\n    };\n  };\n\n  InternalDecoratorFactory.prototype.createInstanceDecorator = function (config) {\n    var _this = this;\n\n    var applicator = config.applicator,\n        bound = config.bound;\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return function (target, name, _descriptor) {\n        var descriptor = _this._resolveDescriptor(target, name, _descriptor);\n\n        var value = descriptor.value,\n            writable = descriptor.writable,\n            enumerable = descriptor.enumerable,\n            configurable = descriptor.configurable,\n            get = descriptor.get,\n            set = descriptor.set;\n        var isFirstInstance = !common_1.InstanceChainMap.has([target, name]);\n        var chainData = common_1.InstanceChainMap.get([target, name]) || {\n          fns: [],\n          properties: []\n        };\n        var isGetter = isFirstInstance && isFunction(get);\n        var isSetter = isFirstInstance && isFunction(set);\n        var isMethod = isFirstInstance && isFunction(value);\n        var isProperty = isFirstInstance && !isGetter && !isSetter && !isMethod;\n        chainData.properties.push(name);\n        chainData.fns.push(function (fn, instance, context) {\n          if (!_this._isApplicable(context, config)) {\n            return fn;\n          }\n\n          if (bound) {\n            fn = utils_1.bind(fn, instance);\n          }\n\n          return utils_1.copyMetadata(applicator.apply({\n            args: args,\n            target: target,\n            instance: instance,\n            value: fn,\n            config: config\n          }), fn);\n        });\n        common_1.InstanceChainMap.set([target, name], chainData);\n\n        if (!isFirstInstance) {\n          return descriptor;\n        }\n\n        chainData.isSetter = isSetter;\n        chainData.isGetter = isGetter;\n        chainData.isMethod = isMethod;\n        chainData.isProperty = isProperty;\n\n        var applyChain = function applyChain(fn, context, instance) {\n          return chainData.fns.reduce(function (result, next) {\n            return next(result, instance, context);\n          }, fn);\n        };\n\n        var applyDecorator = function applyDecorator(instance) {\n          var getter = get || undefined;\n          var setter = set || undefined;\n\n          if (isGetter || isSetter) {\n            // If we have a getter apply the decorators to the getter and assign it to the instance.\n            if (isGetter) {\n              getter = applyChain(get, {\n                value: get,\n                getter: true\n              }, instance);\n            }\n\n            if (isSetter) {\n              setter = applyChain(set, {\n                value: set,\n                setter: true\n              }, instance);\n            }\n\n            Object.defineProperty(instance, name, {\n              enumerable: enumerable,\n              configurable: configurable,\n              get: getter,\n              set: setter\n            });\n          } else if (isMethod || isProperty) {\n            var newFn = isMethod ? applyChain(value, {\n              value: value,\n              method: true\n            }, instance) : applyChain(value, {\n              value: value,\n              property: true\n            }, instance);\n            Object.defineProperty(instance, name, {\n              writable: writable,\n              enumerable: enumerable,\n              configurable: configurable,\n              value: newFn\n            });\n          }\n        };\n\n        if (isMethod || isProperty) {\n          delete descriptor.value;\n          delete descriptor.writable;\n        }\n\n        descriptor.get = function () {\n          applyDecorator(this);\n          var descriptor = Object.getOwnPropertyDescriptor(this, name);\n\n          if (descriptor.get) {\n            return descriptor.get.call(this);\n          }\n\n          return descriptor.value;\n        };\n\n        descriptor.set = function (value) {\n          applyDecorator(this);\n          var descriptor = Object.getOwnPropertyDescriptor(this, name);\n\n          if (descriptor.set) {\n            descriptor.set.call(this, value);\n          } else if (isProperty || isMethod) {\n            this[name] = value;\n          }\n        };\n\n        return descriptor;\n      };\n    };\n  };\n\n  InternalDecoratorFactory.prototype._isApplicable = function (context, config) {\n    return !Boolean(context.getter && !config.getter || context.setter && !config.setter || context.method && !config.method || context.property && !config.property);\n  };\n\n  InternalDecoratorFactory.prototype._resolveDescriptor = function (target, name, descriptor) {\n    if (descriptor) {\n      return descriptor;\n    }\n\n    return Object.getOwnPropertyDescriptor(target, name) || {};\n  };\n\n  return InternalDecoratorFactory;\n}();\n\nexports.InternalDecoratorFactory = InternalDecoratorFactory;\nexports.DecoratorFactory = new InternalDecoratorFactory();","map":null,"metadata":{},"sourceType":"script"}