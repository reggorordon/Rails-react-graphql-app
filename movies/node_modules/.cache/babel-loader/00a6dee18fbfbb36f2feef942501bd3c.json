{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar delay = require(\"lodash/delay\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(function (value, wait) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return function () {\n    var invokeArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      invokeArgs[_i] = arguments[_i];\n    }\n\n    return delay.apply(void 0, [value.bind(this), wait].concat(invokeArgs, args));\n  };\n}, new applicators_1.PreValueApplicator(), {\n  setter: true\n}));\n/**\n * Invokes func after wait milliseconds. Any additional arguments are provided to func when it's invoked.\n *\n * @param {number} wait The number of milliseconds to delay invocation.\n * @param {...*} [args] Additional arguments to invoke the function with\n * @example\n *\n * class MyClass {\n *   value = 100;\n *\n *   @Delay(20)\n *   add(a) {\n *     this.value += a;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.add(10);\n *\n * myClass.value; // => 100;\n *\n * setTimeout(() => {\n *   myClass.value; // => 110;\n * }, 30);\n */\n\nfunction Delay(wait) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  return decorator.apply(void 0, [wait].concat(args));\n}\n\nexports.Delay = Delay;\nexports.delay = Delay;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}