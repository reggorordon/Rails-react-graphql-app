{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar without = require(\"lodash/without\");\n\nvar attempt = require(\"lodash/attempt\");\n\nvar isObject = require(\"lodash/isObject\");\n/**\n * Assigns all properties from an object to another object including non enumerable\n * properties.\n * @export\n * @template T\n * @template U\n * @param {T} to\n * @param {U} from\n * @param {string[]} [excludes=[]]\n * @returns {T}\n */\n\n\nfunction assignAll(to, from, excludes) {\n  if (excludes === void 0) {\n    excludes = [];\n  }\n\n  var properties = without.apply(void 0, [Object.getOwnPropertyNames(from)].concat(excludes));\n\n  for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n    var prop = properties_1[_i];\n    attempt(assignProperty, to, from, prop);\n  }\n\n  return to;\n}\n\nexports.assignAll = assignAll;\n/**\n * Assigns a property from one object to another while retaining descriptor properties.\n * @export\n * @template T\n * @template U\n * @param {T} to\n * @param {U} from\n * @param {string} prop\n */\n\nfunction assignProperty(to, from, prop) {\n  var descriptor = Object.getOwnPropertyDescriptor(to, prop);\n\n  if (!descriptor || descriptor.configurable) {\n    var srcDescriptor = Object.getOwnPropertyDescriptor(from, prop);\n\n    if (isObject(srcDescriptor)) {\n      Object.defineProperty(to, prop, srcDescriptor);\n    } else {\n      to[prop] = from[prop];\n    }\n  }\n}\n\nexports.assignProperty = assignProperty;","map":null,"metadata":{},"sourceType":"script"}