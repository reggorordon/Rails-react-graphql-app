{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar curry = require(\"lodash/curry\");\n\nvar factory_1 = require(\"./factory\");\n\nvar applicators_1 = require(\"./applicators\");\n\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(curry, new applicators_1.PreValueApplicator()));\n/**\n * Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on.\n * The arity of func may be specified if func.length is not sufficient.\n *\n * The _.curry.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.\n *\n * Note: This method doesn't set the \"length\" property of curried functions.\n * Note: The original function invoked will not be called in the context of the instance. Use `Curry` to for using it bound.\n * @param {number} [arity] The arity of func.\n * @example\n *\n * class MyClass {\n *   @CurryAll()\n *   add(a, b) {\n *     return (a + b);\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * const add5 = myClass.add(5);\n *\n * add5AndMultiply(10); // => 15\n */\n\nfunction CurryAll(arity) {\n  return decorator(arity);\n}\n\nexports.CurryAll = CurryAll;\nexports.curryAll = CurryAll;\nexports.default = decorator;","map":null,"metadata":{},"sourceType":"script"}