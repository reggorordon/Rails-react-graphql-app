"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = defineToStringTag;

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
=======
exports.default = applyToStringTag;

/**
 * Copyright (c) 2015-present, Facebook, Inc.
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
<<<<<<< HEAD
 * 
 */

/**
 * The `defineToStringTag()` function checks first to see if the runtime
=======
 *  strict
 */

/**
 * The `applyToStringTag()` function checks first to see if the runtime
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
 * supports the `Symbol` class and then if the `Symbol.toStringTag` constant
 * is defined as a `Symbol` instance. If both conditions are met, the
 * Symbol.toStringTag property is defined as a getter that returns the
 * supplied class constructor's name.
 *
<<<<<<< HEAD
 * @method defineToStringTag
=======
 * @method applyToStringTag
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
 *
 * @param {Class<any>} classObject a class such as Object, String, Number but
 * typically one of your own creation through the class keyword; `class A {}`,
 * for example.
 */
<<<<<<< HEAD
function defineToStringTag(classObject) {
=======
function applyToStringTag(classObject) {
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
  if (typeof Symbol === 'function' && Symbol.toStringTag) {
    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {
      get: function get() {
        return this.constructor.name;
      }
    });
  }
}