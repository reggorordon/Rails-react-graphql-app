/**
<<<<<<< HEAD
 * Copyright (c) Facebook, Inc. and its affiliates.
=======
 * Copyright (c) 2015-present, Facebook, Inc.
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import { GraphQLError } from '../error/GraphQLError';
import type {
  OperationDefinitionNode,
  OperationTypeDefinitionNode,
} from '../language/ast';
import type { GraphQLSchema } from '../type/schema';
import type { GraphQLObjectType } from '../type/definition';

/**
 * Extracts the root type of the operation from the schema.
 */
export function getOperationRootType(
  schema: GraphQLSchema,
  operation: OperationDefinitionNode | OperationTypeDefinitionNode,
): GraphQLObjectType {
  switch (operation.operation) {
    case 'query':
      const queryType = schema.getQueryType();
      if (!queryType) {
        throw new GraphQLError(
          'Schema does not define the required query root type.',
<<<<<<< HEAD
          operation,
=======
          [operation],
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
        );
      }
      return queryType;
    case 'mutation':
      const mutationType = schema.getMutationType();
      if (!mutationType) {
<<<<<<< HEAD
        throw new GraphQLError(
          'Schema is not configured for mutations.',
          operation,
        );
=======
        throw new GraphQLError('Schema is not configured for mutations.', [
          operation,
        ]);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
      }
      return mutationType;
    case 'subscription':
      const subscriptionType = schema.getSubscriptionType();
      if (!subscriptionType) {
<<<<<<< HEAD
        throw new GraphQLError(
          'Schema is not configured for subscriptions.',
          operation,
        );
=======
        throw new GraphQLError('Schema is not configured for subscriptions.', [
          operation,
        ]);
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
      }
      return subscriptionType;
    default:
      throw new GraphQLError(
        'Can only have query, mutation and subscription operations.',
<<<<<<< HEAD
        operation,
=======
        [operation],
>>>>>>> b22d4f639358533e1bbd355b77d7a3342c6a63e8
      );
  }
}
